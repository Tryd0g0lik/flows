services:
    db:
        container_name: postgres_app
        image: postgres
        env_file: ./.env
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
        restart: unless-stopped
        healthcheck:
            test: ['CMD-SHELL', '-d ${POSTGRES_DB} -U ${POSTGRES_USER}']
            interval: 5s
            timeout: 5s
            retries: 5
        ports:
            - "5432:5432"
    backend:
        container_name: app
        build:
          dockerfile: ./Dockerfile
          context: .
        env_file: ./.env
        command:
            - bash
            - -c
            - |
                python3 ./manage.py makemigrations
                python3 ./manage.py migrate
                python3 ./manage.py collectstatic --clear --noinput
                python3 ./manage.py shell -c "
                from django.contrib.auth import get_user_model
                User = get_user_model()
                if not User.objects.filter(username='root').exists():
                    User.objects.create_superuser('root', 'admin@example.com', '123')
                    print('Superuser root created successfully')
                else:
                    print('Superuser root already exists')
                "
                daphne -b 0.0.0.0 -p 8000 project.asgi:application

        volumes:
           - ./:/www/src
           - volume_static:/www/src/collectstatic
        depends_on:
          - db
        ports:
          - "8000:8000"

    nginx:
        container_name: nginx_app
        build:
            context: ./nginx
            dockerfile: Dockerfile
        depends_on:
            - backend
        volumes:
            - volume_static:/www/src/collectstatic
        restart: on-failure
        ports:
            - "80:80"
volumes:
    volume_static:
